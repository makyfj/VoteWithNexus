### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  accessToken: String!
  user: User!
}

type Board {
  description: String!
  id: ID!
  items: [Item!]!
  name: String!
}

input BoardWhereUniqueInput {
  id: ID!
}

input CreateBoardInput {
  description: String!
  name: String!
}

input CreateBoardItemInput {
  content: String!
}

type Item {
  content: String!
  id: ID!
  votes: [Vote!]!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createBoard(input: CreateBoardInput!): Board
  createBoardItem(input: CreateBoardItemInput!, where: BoardWhereUniqueInput!): Item
  login(input: LoginInput!): AuthPayload!
  logout: User!
  refreshAuth: AuthPayload!
  removeBoardItem(where: BoardWhereUniqueInput!): Item
  signup(input: SignupInput!): AuthPayload!
  voteItem(where: VoteItemWhereUniqueInput!): Vote
}

type Query {
  board(where: BoardWhereUniqueInput!): Board
  boards: [Board!]
  user(where: UserWhereUniqueInput!): User
  users: [User!]
}

input SignupInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type User {
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  password: String!
  votes: [Vote!]!
}

input UserWhereUniqueInput {
  id: ID!
}

type Vote {
  item: Item!
  itemId: ID!
  user: User!
  userId: ID!
}

input VoteItemWhereUniqueInput {
  itemId: String!
  userId: String!
}
